name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  VERSION: "v0.1.0"
  FRONTEND_NAME: "next-app-simple"

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: slim

      # Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Run tests
      # - name: Run tests
      #   run: pnpm test

      # Lint code
      - name: Run linting
        run: pnpm lint

  # docker:
  #   needs: test
  #   runs-on: ubuntu-22.04

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Extract version from package.json
  #     - name: Extract version
  #       id: extract_version
  #       run: |
  #         VERSION=$(node -p "require('./package.json').version")
  #         echo "VERSION=$VERSION" >> $GITHUB_ENV

  #     # Create GitHub release
  #     - name: Create Release
  #       run: |
  #         gh release create ${{ env.VERSION }} --generate-notes --title "v${{ env.VERSION }} "
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
  #         # Log in to Docker Hub
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     # Build and push Docker image
  #     - name: Build and push Docker image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_NAME }}:latest .
  #         docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_NAME }}:${{ env.VERSION }}
  #         docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_NAME }}:latest
  #         docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_NAME }}:${{ env.VERSION }}

  # deploy:
  #   needs: docker
  #   runs-on: ubuntu-22.04

  #   steps:
  #     # Set up SSH
  #     - name: Set up SSH
  #       uses: webfactory/ssh-agent@v0.9.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
  #     # Add VPS to known hosts 
  #     - name: Add VPS to known hosts
  #       run: |
  #         mkdir -p ~/.ssh
  #         ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
    
  #     # Test SSH Connection
  #     - name: Test SSH Connection
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} echo "SSH connection successful"

  #     - name: Deploy to VPS
  #       run: |
  #         ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
  #           chmod 600 ~/.ssh/id_ed25519_clientes
  #           ssh-keyscan github.com >> ~/.ssh/known_hosts
  
  #           eval "$(ssh-agent -s)"
  #           ssh-add ~/.ssh/id_ed25519_clientes
  
  #           cd ~/04_Frontends/clientes-app
  #           git pull
  #           docker compose down
  #           docker compose pull
  #           docker compose up -d --build
  #         EOF